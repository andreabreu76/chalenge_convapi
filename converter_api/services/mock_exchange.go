// Code generated by MockGen. DO NOT EDIT.
// Source: services/exchange.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	entities "github.com/andreabreu76/chalenge_convapi/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockExchangeService is a mock of ExchangeService interface.
type MockExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceMockRecorder
}

// MockExchangeServiceMockRecorder is the mock recorder for MockExchangeService.
type MockExchangeServiceMockRecorder struct {
	mock *MockExchangeService
}

// NewMockExchangeService creates a new mock instance.
func NewMockExchangeService(ctrl *gomock.Controller) *MockExchangeService {
	mock := &MockExchangeService{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeService) EXPECT() *MockExchangeServiceMockRecorder {
	return m.recorder
}

// ConvertCurrency mocks base method.
func (m *MockExchangeService) ConvertCurrency(ctx context.Context, amount float64, from, to string, rate float64) (*entities.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertCurrency", ctx, amount, from, to, rate)
	ret0, _ := ret[0].(*entities.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertCurrency indicates an expected call of ConvertCurrency.
func (mr *MockExchangeServiceMockRecorder) ConvertCurrency(ctx, amount, from, to, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertCurrency", reflect.TypeOf((*MockExchangeService)(nil).ConvertCurrency), ctx, amount, from, to, rate)
}

// CreateExchange mocks base method.
func (m *MockExchangeService) CreateExchange(ctx context.Context, exchange *entities.Exchange) (*entities.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchange", ctx, exchange)
	ret0, _ := ret[0].(*entities.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExchange indicates an expected call of CreateExchange.
func (mr *MockExchangeServiceMockRecorder) CreateExchange(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchange", reflect.TypeOf((*MockExchangeService)(nil).CreateExchange), ctx, exchange)
}

// DeleteExchange mocks base method.
func (m *MockExchangeService) DeleteExchange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExchange indicates an expected call of DeleteExchange.
func (mr *MockExchangeServiceMockRecorder) DeleteExchange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchange", reflect.TypeOf((*MockExchangeService)(nil).DeleteExchange), ctx, id)
}

// GetExchangeByID mocks base method.
func (m *MockExchangeService) GetExchangeByID(ctx context.Context, id string) (*entities.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeByID", ctx, id)
	ret0, _ := ret[0].(*entities.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeByID indicates an expected call of GetExchangeByID.
func (mr *MockExchangeServiceMockRecorder) GetExchangeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeByID", reflect.TypeOf((*MockExchangeService)(nil).GetExchangeByID), ctx, id)
}

// ListExchanges mocks base method.
func (m *MockExchangeService) ListExchanges(ctx context.Context) ([]*entities.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExchanges", ctx)
	ret0, _ := ret[0].([]*entities.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExchanges indicates an expected call of ListExchanges.
func (mr *MockExchangeServiceMockRecorder) ListExchanges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExchanges", reflect.TypeOf((*MockExchangeService)(nil).ListExchanges), ctx)
}

// UpdateExchange mocks base method.
func (m *MockExchangeService) UpdateExchange(ctx context.Context, exchange *entities.Exchange) (*entities.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchange", ctx, exchange)
	ret0, _ := ret[0].(*entities.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExchange indicates an expected call of UpdateExchange.
func (mr *MockExchangeServiceMockRecorder) UpdateExchange(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchange", reflect.TypeOf((*MockExchangeService)(nil).UpdateExchange), ctx, exchange)
}
